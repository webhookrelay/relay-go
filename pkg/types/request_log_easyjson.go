// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package types

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
	http "net/http"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson8e8f11baDecodeGithubComWebhookrelayRelayGoPkgTypes(in *jlexer.Lexer, out *LogUpdateRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "status_code":
			out.StatusCode = int(in.Int())
		case "response_body":
			if in.IsNull() {
				in.Skip()
				out.ResponseBody = nil
			} else {
				out.ResponseBody = in.Bytes()
			}
		case "response_headers":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.ResponseHeaders = make(http.Header)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v2 []string
					if in.IsNull() {
						in.Skip()
						v2 = nil
					} else {
						in.Delim('[')
						if v2 == nil {
							if !in.IsDelim(']') {
								v2 = make([]string, 0, 4)
							} else {
								v2 = []string{}
							}
						} else {
							v2 = (v2)[:0]
						}
						for !in.IsDelim(']') {
							var v3 string
							v3 = string(in.String())
							v2 = append(v2, v3)
							in.WantComma()
						}
						in.Delim(']')
					}
					(out.ResponseHeaders)[key] = v2
					in.WantComma()
				}
				in.Delim('}')
			}
		case "status":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Status).UnmarshalJSON(data))
			}
		case "retries":
			out.Retries = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson8e8f11baEncodeGithubComWebhookrelayRelayGoPkgTypes(out *jwriter.Writer, in LogUpdateRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"status_code\":"
		out.RawString(prefix)
		out.Int(int(in.StatusCode))
	}
	{
		const prefix string = ",\"response_body\":"
		out.RawString(prefix)
		out.Base64Bytes(in.ResponseBody)
	}
	{
		const prefix string = ",\"response_headers\":"
		out.RawString(prefix)
		if in.ResponseHeaders == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v6First := true
			for v6Name, v6Value := range in.ResponseHeaders {
				if v6First {
					v6First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v6Name))
				out.RawByte(':')
				if v6Value == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v7, v8 := range v6Value {
						if v7 > 0 {
							out.RawByte(',')
						}
						out.String(string(v8))
					}
					out.RawByte(']')
				}
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"status\":"
		out.RawString(prefix)
		out.Raw((in.Status).MarshalJSON())
	}
	{
		const prefix string = ",\"retries\":"
		out.RawString(prefix)
		out.Int(int(in.Retries))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v LogUpdateRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson8e8f11baEncodeGithubComWebhookrelayRelayGoPkgTypes(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v LogUpdateRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson8e8f11baEncodeGithubComWebhookrelayRelayGoPkgTypes(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *LogUpdateRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson8e8f11baDecodeGithubComWebhookrelayRelayGoPkgTypes(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *LogUpdateRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson8e8f11baDecodeGithubComWebhookrelayRelayGoPkgTypes(l, v)
}
