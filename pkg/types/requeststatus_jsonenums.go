// generated by jsonenums -type=RequestStatus; DO NOT EDIT

package types

import (
	"encoding/json"
	"fmt"
)

var (
	_RequestStatusNameToValue = map[string]RequestStatus{
		"RequestStatusPreparing": RequestStatusPreparing,
		"RequestStatusSent":      RequestStatusSent,
		"RequestStatusFailed":    RequestStatusFailed,
		"RequestStatusStalled":   RequestStatusStalled,
		"RequestStatusReceived":  RequestStatusReceived,
		"RequestStatusRejected":  RequestStatusRejected,
	}

	_RequestStatusValueToName = map[RequestStatus]string{
		RequestStatusPreparing: "RequestStatusPreparing",
		RequestStatusSent:      "RequestStatusSent",
		RequestStatusFailed:    "RequestStatusFailed",
		RequestStatusStalled:   "RequestStatusStalled",
		RequestStatusReceived:  "RequestStatusReceived",
		RequestStatusRejected:  "RequestStatusRejected",
	}
)

func init() {
	var v RequestStatus
	if _, ok := interface{}(v).(fmt.Stringer); ok {
		_RequestStatusNameToValue = map[string]RequestStatus{
			interface{}(RequestStatusPreparing).(fmt.Stringer).String(): RequestStatusPreparing,
			interface{}(RequestStatusSent).(fmt.Stringer).String():      RequestStatusSent,
			interface{}(RequestStatusFailed).(fmt.Stringer).String():    RequestStatusFailed,
			interface{}(RequestStatusStalled).(fmt.Stringer).String():   RequestStatusStalled,
			interface{}(RequestStatusReceived).(fmt.Stringer).String():  RequestStatusReceived,
			interface{}(RequestStatusRejected).(fmt.Stringer).String():  RequestStatusRejected,
		}
	}
}

// MarshalJSON is generated so RequestStatus satisfies json.Marshaler.
func (r RequestStatus) MarshalJSON() ([]byte, error) {
	if s, ok := interface{}(r).(fmt.Stringer); ok {
		return json.Marshal(s.String())
	}
	s, ok := _RequestStatusValueToName[r]
	if !ok {
		return nil, fmt.Errorf("invalid RequestStatus: %d", r)
	}
	return json.Marshal(s)
}

// UnmarshalJSON is generated so RequestStatus satisfies json.Unmarshaler.
func (r *RequestStatus) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("RequestStatus should be a string, got %s", data)
	}
	v, ok := _RequestStatusNameToValue[s]
	if !ok {
		return fmt.Errorf("invalid RequestStatus %q", s)
	}
	*r = v
	return nil
}
